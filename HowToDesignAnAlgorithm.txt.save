hello there today I want to walk you through how to design an algorithm 
the grug brain way so recently while I was building the program video 
games course we had a bit of an issue where basically we had this level 
data coming in so this is what it kind of looked like and you can see 
these ones represent where tiles are so I'm making a 2d Tile game and 
the On's are where the tiles are and a zero is where the air is so the 
colliders ended up looking something like this in a naive implementation 
and so we had tons and tons and tons of colliders in the level and we 
didn't really want that we wanted to have something a little bit more 
efficient so we could make larger levels without checking all the tiles 
now there's a couple of things we could have done we could have done a 
broad phase sweep which would mean we basically get the character's 
position let's say the character is here in this tile and they're moving 
up this way then we could check around where the character is and where 
the character is going to be in that direction so we could check sort of 
these all these tiles here and we could check for collisions against 
those we could do something like that or we could try to combine the 
tiles which is what we ended up doing into a bit of a better design 
something like this so we've only got four here rather than I think this 
is 18 or something like that so how do we go about designing something 
like this and why would we want to do that well since we made our own 
engine we had our own Collision detection code which means that we could 
use whatever subset of collision resolution Collision detection that we 
wanted so we decided to just go with rectangles versus rectangles cuz 
that's all we needed so we've got our rectangle versus rectangle 
collisions and and that's all well and good but we don't want to check 
all of the rectangles another thing is if you were using a custom or not 
a custom if you're using a game engine like gdau or Unity you may have 
problems with these kinds of tile colliders where your characters 
walking along here and then it gets stuck on a little invisible Edge 
that you can't see I've seen many many Forum posts about this and the 
solutions that are provided don't seem to work all too well but luckily 
we have all of our own custom text so we can easily fix those kind of 
issues so how do we go about designing going from this to this well 
first what we might do is search Google we scour Google we'd read a 
bunch of stack Overflow posts we' read a bunch of forum posts which is 
what I did which is how I know about those gdau and unity issues and 
then we might come away with an algorithm that looks something like this 
or turns our data into something like this so we've created this sort of 
polygon here so we've got two polygons but if you remember what I said 
before our engine doesn't support arbitrary polygons so now we're 
thinking okay well we have to make a new Collision detection maybe we 
can just detect rectangle versus line and then we've got to check are we 
inside or outside of this object or maybe we can Implement something 
like gjk and that's all getting really complicated really quickly so 
let's just not do that let's go back to our data and let's have a look 
at it so what have we got here this is the same data but we've labeled 
the array indices so you can imagine this data comes from a level editor 
or something and this is the order that we get the data back so we've 
got zero at the top and then we go across and then we go down so we go 
across then down pretty straight forward but what does that tell us or 
rather what does that give us if we Imagine That We're looping through 
this data we start at zero we say okay we're we're inside a solid tile 
so let's start building a little rectangle here and then we go to one 
we're like oh we were just in a tile so let's extend the rectangle 
across then we go to two and three and four we repeat that process then 
we get down to five we're like oh we're on a new row so now we can't 
possibly extend a rectangle or I guess we could try uh but we might get 
some issues with that so we might create a really large rectangle here 
that includes this8 and n and then that would be a bit of a problem so 
what I decided to do is I thought okay since the dot is already laid out 
like this we can just combine the rectangles horizontally and end up 
with something like this great that's already much better we already 
have many less rectangles to check many less points of potentially 
getting stuck in weird edge cases but then I thought well I've got the 
data like this surely we can just do the same thing but vertically right 
so let's have a look at the code for combining the rectangles into wide 
rectangles the implementation isn't that important it's pretty 
straightforward we just create a cell and we extend the cell if the 
previous one was something right and then we append to this list of R 
wide rectangles and that gives us this shape here and what does that 
give us in the array so we've got this wide rectangles array we've got 
an index starting at zero which is the top one and then we go down one 
two and then we go across three and then down and then across and then 
down and then across that makes sense if you remember that our order was 
left to right top to bottom but now if we want to combine vertically 
well we're going to have a bit of a problem here because these will 
combine one and two so that's that's great but then we go to three and 
then we go to four and those are different X offsets whereas we kind of 
need three four and five to be here or something like that we need these 
ones to be next to each other in the array so when we iterate we can 
check if they are touching vertically if they're the same width and 
they're touching vertically so what we need to do is we need to sort 
this so we need to sort BAS basically like this we check if the 
expositions are not equal and then we return uh a dox less than b dox so 
basically if you can see four and five have a different exp position 
which would be the left side here so four becomes four comes before five 
and then if they are equal then we sort by the a uh the Y AIS and then 
we get something like this so we got 0 1 2 3 4 5 that's great that's 
exactly what we wanted so we can just do basically the same thing as 
before and we can create our big rectangles now or merged rectangle 
sorry uh we create our big rectangle which is the instance of a large 
rectangle and then we basically do a few checks here if it's the same 
exp position and if it's the same width and if they are butting so if 
they're on top of each other I could have used if they're stacked or 
something I don't know why I use that word but that's the word I used 
and I'm we just say if the if all of these conditions pass then we 
extend our rectangle otherwise we're done and we merge our rectangle and 
then we have to merge the last one here because that doesn't get handled 
by this Loop and that's it and then we just set the big rectangle to the 
new rectangle so it's pretty straightforward and what does that give us 
that gives us this which is exactly what we wanted now we have only one 
of those weird little sticky Edge case things on the inside here one on 
the outside here and that's about it but you know in our engine we don't 
actually have a problem with that but if you did you could see how this 
would be a much better result and also I should mention that our game 
that we building is a Metroid Vania so we prefer to have these flat long 
platforms but if you building something that was primarily tra where you 
primarily traveling vertically you might want to change the this 
algorithm to have vertical precedence and you could do that easily so 
you would just sort it combine it vertically and then combine it 
horizontally so it' be the opposite way and that's it that's how you 
design an algorithm if you're interested in this kind of stuff check out 
my website program videogames.com sfree there is a free pong course on 
there which goes over some Collision detection and resolution stuff 
which I think you might find interesting and also uh sign up to my 
newsletter which you can do through this website as well and that's it 
I'll see you in the next one
